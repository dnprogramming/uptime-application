/**
 * @fileoverview gRPC-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: report.proto

/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as report_pb from './report_pb'; // proto import: "report.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class ReportClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddApplication = new grpcWeb.MethodDescriptor(
    '/Report/AddApplication',
    grpcWeb.MethodType.UNARY,
    report_pb.AddApplicationRequest,
    report_pb.AddApplicationResponse,
    (request: report_pb.AddApplicationRequest) => {
      return request.serializeBinary();
    },
    report_pb.AddApplicationResponse.deserializeBinary
  );

  addApplication(
    request: report_pb.AddApplicationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.AddApplicationResponse>;

  addApplication(
    request: report_pb.AddApplicationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.AddApplicationResponse) => void): grpcWeb.ClientReadableStream<report_pb.AddApplicationResponse>;

  addApplication(
    request: report_pb.AddApplicationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.AddApplicationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Report/AddApplication',
        request,
        metadata || {},
        this.methodDescriptorAddApplication,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Report/AddApplication',
    request,
    metadata || {},
    this.methodDescriptorAddApplication);
  }

  methodDescriptorUpdateApplication = new grpcWeb.MethodDescriptor(
    '/Report/UpdateApplication',
    grpcWeb.MethodType.UNARY,
    report_pb.UpdateApplicationRequest,
    report_pb.UpdateApplicationResponse,
    (request: report_pb.UpdateApplicationRequest) => {
      return request.serializeBinary();
    },
    report_pb.UpdateApplicationResponse.deserializeBinary
  );

  updateApplication(
    request: report_pb.UpdateApplicationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.UpdateApplicationResponse>;

  updateApplication(
    request: report_pb.UpdateApplicationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.UpdateApplicationResponse) => void): grpcWeb.ClientReadableStream<report_pb.UpdateApplicationResponse>;

  updateApplication(
    request: report_pb.UpdateApplicationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.UpdateApplicationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Report/UpdateApplication',
        request,
        metadata || {},
        this.methodDescriptorUpdateApplication,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Report/UpdateApplication',
    request,
    metadata || {},
    this.methodDescriptorUpdateApplication);
  }

  methodDescriptorGetApplications = new grpcWeb.MethodDescriptor(
    '/Report/GetApplications',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    report_pb.GetApplicationsResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    report_pb.GetApplicationsResponse.deserializeBinary
  );

  getApplications(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.GetApplicationsResponse>;

  getApplications(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.GetApplicationsResponse) => void): grpcWeb.ClientReadableStream<report_pb.GetApplicationsResponse>;

  getApplications(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.GetApplicationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Report/GetApplications',
        request,
        metadata || {},
        this.methodDescriptorGetApplications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Report/GetApplications',
    request,
    metadata || {},
    this.methodDescriptorGetApplications);
  }

  methodDescriptorGetApplication = new grpcWeb.MethodDescriptor(
    '/Report/GetApplication',
    grpcWeb.MethodType.UNARY,
    report_pb.GetApplicationRequest,
    report_pb.GetApplicationResponse,
    (request: report_pb.GetApplicationRequest) => {
      return request.serializeBinary();
    },
    report_pb.GetApplicationResponse.deserializeBinary
  );

  getApplication(
    request: report_pb.GetApplicationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.GetApplicationResponse>;

  getApplication(
    request: report_pb.GetApplicationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.GetApplicationResponse) => void): grpcWeb.ClientReadableStream<report_pb.GetApplicationResponse>;

  getApplication(
    request: report_pb.GetApplicationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.GetApplicationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Report/GetApplication',
        request,
        metadata || {},
        this.methodDescriptorGetApplication,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Report/GetApplication',
    request,
    metadata || {},
    this.methodDescriptorGetApplication);
  }

}

